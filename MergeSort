package Demo;

import java.util.Arrays;

public class MergeSort {
	
	public void mergeSort(int array[], int left, int right) {
		if (left < right) {
			int mid = (left + right) / 2;
			mergeSort(array, left, mid);
			mergeSort(array, mid + 1, right);
			merge(array, left, mid, right);
		}
	}

	private void merge(int[] array, int left, int mid, int right) {
		int n1 = mid - left + 1; // Size of left subarray
		int n2 = right - mid;    // Size of right subarray

		int[] leftArray = new int[n1];
		int[] rightArray = new int[n2];

		// Copy data to temp arrays
		for (int i = 0; i < n1; i++) {
			leftArray[i] = array[left + i];
		}
		for (int j = 0; j < n2; j++) {
			rightArray[j] = array[mid + 1 + j];
		}

		// Merge the temp arrays back into array[left..right]
		int i = 0, j = 0;
		int k = left;

		while (i < n1 && j < n2) {
			if (leftArray[i] <= rightArray[j]) {
				array[k++] = leftArray[i++];
			} else {
				array[k++] = rightArray[j++];
			}
		}

		// Copy remaining elements of leftArray[] if any
		while (i < n1) {
			array[k++] = leftArray[i++];
		}

		// Copy remaining elements of rightArray[] if any
		while (j < n2) {
			array[k++] = rightArray[j++];
		}
	}

	public static void main(String[] args) {
		int[] array = { 38, 27, 43, 3, 9, 82, 10 };
		
		System.out.println("Original array: " + Arrays.toString(array));
		
		MergeSort ms = new MergeSort();
		ms.mergeSort(array, 0, array.length - 1);
		
		System.out.println("Sorted array:   " + Arrays.toString(array));
	}
}
